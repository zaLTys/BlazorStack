@page "/register"
@using BlazorStack.Shared.Models
@inject IUnitService UnitService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IAuthService AuthService
@inject IToastService ToastService

<h3>Register</h3>

<EditForm Model="user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="email" class="required">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control"></InputText>
        <ValidationMessage For="@(()=> user.Email)" />
    </div>
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="email" @bind-Value="user.Username" class="form-control"></InputText>
        <ValidationMessage For="@(()=> user.Username)" />
    </div>
    <div class="form-group">
        <label for="password" class="required">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(()=> user.Password)" />
    </div>
    <div class="form-group">
        <label for="confirmPassword">ConfirmPassword</label>
        <InputText id="confirmPassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(()=> user.ConfirmPassword)" />
    </div>
    <div class="form-group">
        <label for="bio">Bio</label>
        <InputTextArea id="bio" @bind-Value="user.Bio" class="form-control"></InputTextArea>
    </div>
    <div class="form-group">
        <label for="startUnit">StartUnit</label><br />
        <InputRadioGroup id="startUnit" @bind-Value="user.StartUnitId" class="form-control">
            @foreach (var unit in UnitService.Units)
            {
                <InputRadio Value="@unit.Id" /> <span style="padding-left: 5px;">@unit.Title</span>

                <br />
            }
        </InputRadioGroup>
    </div>
    <div class="form-group">
        <label for="points">Points</label>
        <InputNumber id="points" @bind-Value="user.Points" class="form-control"></InputNumber>
        <ValidationMessage For="@(()=> user.Points)" />
    </div>
    <div class="form-group">
        <label for="dateOfBirth">DateOfBirth</label>
        <InputDate id="dateOfBirth" @bind-Value="user.DateOfBirth" class="form-control"></InputDate>
    </div>
    <div class="form-check">
        <InputCheckbox id="accepted" @bind-Value="user.AcceptedTermsAgreements" class="form-check-input"></InputCheckbox>
        <label for="accepted" class="form-check-label">AcceptTermsAgreements</label>
        <ValidationMessage For="@(()=> user.AcceptedTermsAgreements)" />
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>


@code {
    UserRegisterModel user = new UserRegisterModel();

    protected override async Task OnInitializedAsync()
    {
        await UnitService.LoadUnitsAsync();
    }

    async void HandleRegistration()
    {
        //JAVASCRIPT for testing
        await JSRuntime.InvokeVoidAsync("console.log", "New user to be created:", user);

        var result = await AuthService.Register(user);
        if (result.Success)
        {
            ToastService.ShowSuccess(result.Message);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ToastService.ShowError(result.Message);
        }
    }
}
